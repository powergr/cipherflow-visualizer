---
// src/components/BlogCard.astro
import type { CollectionEntry } from 'astro:content';

// --- THIS IS THE FIX ---
// Instead of a manual interface, we use CollectionEntry<'blog'>.
// This is Astro's official type for a blog post, and it already knows
// that 'image' is an object with a '.src' property from your config.ts!
export interface Props {
  post: CollectionEntry<'blog'>;
}

const { post } = Astro.props;
const base = import.meta.env.BASE_URL;

// Format date for display
const formattedDate = new Date(post.data.pubDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'long',
  day: 'numeric',
});

// Define colors for difficulty badges
const difficultyColors = {
  beginner: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
  intermediate: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
  advanced: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200',
};
---

<article class="group flex flex-col bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden">
  <!-- Card Image -->
  <!-- This code now works because TypeScript knows post.data.image is an object -->
{post.data.thumbnail && (
  // FIX #1: Added a background color to the 'frame' div
  <div class="overflow-hidden bg-gray-200 dark:bg-gray-700">
    <a href=`${base}/blog/${post.slug}`>
      <img 
        src={post.data.thumbnail.src} 
        alt={post.data.thumbnailAlt || post.data.title}
        class="w-full h-48 object-contain object-center transition-transform duration-300 group-hover:scale-105"
        loading="lazy"
      />
    </a>
  </div>
)}

  <!-- Card Content -->
  <div class="p-6 flex flex-col flex-grow">
    <!-- Badges -->
    <div class="flex items-center gap-3 mb-3">
      {post.data.category && (
        <a 
          href=`${base}/categories/${post.data.category.toLowerCase().replace(/\s+/g, '-')}`
          class="px-3 py-1 bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 text-xs font-medium rounded-full hover:bg-blue-200 dark:hover:bg-blue-800 transition-colors"
        >
          {post.data.category}
        </a>
      )}

      {post.data.difficulty && (
        <span class={`px-3 py-1 text-xs font-medium rounded-full ${difficultyColors[post.data.difficulty]}`}>
          {post.data.difficulty.charAt(0).toUpperCase() + post.data.difficulty.slice(1)}
        </span>
      )}
    </div>

    <!-- Title -->
    <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2 flex-grow">
      <a href=`${base}/blog/${post.slug}` class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
        {post.data.title}
      </a>
    </h2>

    <!-- Description -->
    <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">
      {post.data.description}
    </p>

    <!-- Meta Info -->
    <div class="mt-auto pt-4 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-500 dark:text-gray-400">
      <time datetime={post.data.pubDate.toISOString()}>
        {formattedDate}
      </time>
    </div>
  </div>
</article>