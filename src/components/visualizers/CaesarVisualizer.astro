---
// src/components/visualizers/CaesarVisualizer.astro
import VisualizerLayout from './VisualizerLayout.astro';

// Create the unique ID for this instance
const uniqueId = `caesar-vis-${Math.random().toString(36).slice(2)}`;
---

<!-- Use the master layout component -->
<VisualizerLayout title="Caesar Cipher Visualizer" uniqueId={uniqueId}>

    <!-- 1. The unique HTML for the controls -->
    <div slot="controls" class="control-group">
        <label for={`plaintext-${uniqueId}`}>Plain Text:</label>
        <input type="text" id={`plaintext-${uniqueId}`} placeholder="Enter text to encrypt" value="HELLO">
    </div>
    <div slot="controls" class="control-group">
        <label for={`shift-${uniqueId}`}>Shift Value: <span class="shift-display">3</span></label>
        <input type="range" id={`shift-${uniqueId}`} min="1" max="25" value="3">
    </div>
    <div slot="controls" class="control-group">
        <label for={`speed-${uniqueId}`}>Speed:</label>
        <div class="speed-controls">
            <input type="range" id={`speed-${uniqueId}`} min="1" max="10" value="5">
            <span class="speed-display">5</span>
        </div>
    </div>

    <!-- 2. The unique HTML for the action buttons -->
    <div slot="actions">
        <button class="encrypt-btn">ðŸ”’ Encrypt</button>
        <button class="decrypt-btn">ðŸ”“ Decrypt</button>
        <button class="reset-btn">â†» Reset</button>
    </div>

    <!-- 3. The unique HTML for the visualization panel -->
    <div slot="visualization-panel" class="alphabet-wheel"></div>

    <!-- 4. The unique HTML for the text display -->
    <span slot="text-display" class="current-text">HELLO</span>
    
    <!-- 5. The corrected script -->
    <script slot="script" is:inline define:vars={{ containerId: uniqueId }}>
        function initializeCaesarVisualizer(containerId) {
            const container = document.getElementById(containerId);
            if (!container) return;

            const elements = {
                plaintextInput: container.querySelector(`#plaintext-${containerId}`),
                shiftInput: container.querySelector(`#shift-${containerId}`),
                speedInput: container.querySelector(`#speed-${containerId}`),
                encryptBtn: container.querySelector('.encrypt-btn'),
                decryptBtn: container.querySelector('.decrypt-btn'),
                resetBtn: container.querySelector('.reset-btn'),
                stepInfo: container.querySelector('.step-info'),
                textDisplay: container.querySelector('.text-display'),
                shiftDisplay: container.querySelector('.shift-display'),
                speedDisplay: container.querySelector('.speed-display'),
                progressFill: container.querySelector('.progress-fill'),
                alphabetWheel: container.querySelector('.alphabet-wheel')
            };

            new CaesarCipherVisualizer(elements, containerId); // Pass containerId to the class
        }

        class CaesarCipherVisualizer {
            constructor(elements, containerId) {
                this.elements = elements;
                this.containerId = containerId; // Store the unique ID
                this.alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.split('');
                this.isAnimating = false;
                this.animationSpeed = 1000;
                this.currentText = '';
                this.resultText = '';
                this.mode = 'encrypt';
                
                this.setupEventListeners();
                this.createAlphabetWheel();
                this.updateDisplay();
                this.updateSpeedDisplay();
            }
            
            setupEventListeners() {
                this.elements.plaintextInput.addEventListener('input', () => this.updateDisplay());
                this.elements.shiftInput.addEventListener('input', () => this.updateShiftDisplay());
                this.elements.speedInput.addEventListener('input', () => this.updateSpeedDisplay());
                this.elements.encryptBtn.addEventListener('click', () => this.startAnimation('encrypt'));
                this.elements.decryptBtn.addEventListener('click', () => this.startAnimation('decrypt'));
                this.elements.resetBtn.addEventListener('click', () => this.reset());
            }
            
            createAlphabetWheel() {
                this.elements.alphabetWheel.innerHTML = '';
                this.alphabet.forEach((letter, index) => {
                    const letterBox = document.createElement('div');
                    letterBox.className = 'letter-box';
                    letterBox.textContent = letter;
                    // --- THIS IS IMPORTANT ---
                    // We give each box a unique ID based on the container and its index.
                    letterBox.id = `${this.containerId}-letter-${index}`;
                    this.elements.alphabetWheel.appendChild(letterBox);
                });
            }
            
            updateDisplay() {
                this.currentText = this.elements.plaintextInput.value.toUpperCase().replace(/[^A-Z]/g, '');
                this.elements.textDisplay.querySelector('.current-text').textContent = this.currentText;
                this.elements.plaintextInput.value = this.currentText;
            }
            
            updateShiftDisplay() {
                this.elements.shiftDisplay.textContent = this.elements.shiftInput.value;
            }
            
            updateSpeedDisplay() {
                this.elements.speedDisplay.textContent = this.elements.speedInput.value;
                this.animationSpeed = 1100 - (parseInt(this.elements.speedInput.value) * 100);
            }
            
            async startAnimation(mode) {
                if (this.isAnimating) return;
                
                this.mode = mode;
                this.isAnimating = true;
                this.resultText = '';
                
                this.elements.encryptBtn.disabled = true;
                this.elements.decryptBtn.disabled = true;
                
                const text = this.currentText;
                const shift = parseInt(this.elements.shiftInput.value);
                
                if (text.length === 0) {
                    this.elements.stepInfo.textContent = 'Please enter some text first!';
                    this.isAnimating = false;
                    this.elements.encryptBtn.disabled = false;
                    this.elements.decryptBtn.disabled = false;
                    return;
                }
                
                this.elements.stepInfo.textContent = `Starting ${mode}ion with shift ${shift}...`;
                
                for (let i = 0; i < text.length; i++) {
                    await this.animateLetter(text[i], shift, i);
                    this.updateProgress((i + 1) / text.length * 100);
                }
                
                this.elements.stepInfo.textContent = `${mode.charAt(0).toUpperCase() + mode.slice(1)}ion complete!`;
                this.elements.textDisplay.querySelector('.current-text').textContent = this.resultText;
                
                this.isAnimating = false;
                this.elements.encryptBtn.disabled = false;
                this.elements.decryptBtn.disabled = false;
            }
            
            // --- THIS FUNCTION IS NOW FIXED ---
            async animateLetter(letter, shift, position) {
                // Clear all previous highlights first
                this.elements.alphabetWheel.querySelectorAll('.letter-box').forEach(box => {
                    box.classList.remove('highlight', 'result');
                });

                const letterIndex = this.alphabet.indexOf(letter);
                if (letterIndex === -1) {
                    this.resultText += letter;
                    this.elements.textDisplay.querySelector('.current-text').textContent = this.resultText;
                    return;
                }
                
                // Find the specific letter box using its full, unique ID
                const currentBox = document.getElementById(`${this.containerId}-letter-${letterIndex}`);
                if (currentBox) {
                    currentBox.classList.add('highlight');
                }
                
                this.elements.stepInfo.textContent = `${this.mode === 'encrypt' ? 'Encrypting' : 'Decrypting'} '${letter}'`;
                
                await this.sleep(this.animationSpeed / 2);
                
                const effectiveShift = this.mode === 'encrypt' ? shift : -shift;
                const newIndex = (letterIndex + effectiveShift + 26) % 26;
                const newLetter = this.alphabet[newIndex];
                
                // Find the result box using its full, unique ID
                const resultBox = document.getElementById(`${this.containerId}-letter-${newIndex}`);
                if (resultBox) {
                    resultBox.classList.add('result');
                }

                this.elements.stepInfo.textContent = `'${letter}' â†’ '${newLetter}' (shift ${effectiveShift > 0 ? '+' : ''}${effectiveShift})`;
                this.resultText += newLetter;
                this.elements.textDisplay.querySelector('.current-text').textContent = this.resultText;
                
                await this.sleep(this.animationSpeed / 2);
            }
            
            updateProgress(percentage) {
                this.elements.progressFill.style.width = percentage + '%';
            }
            
            sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }
            
            reset() {
                this.isAnimating = false;
                this.resultText = '';
                this.updateDisplay();
                this.updateProgress(0);
                this.elements.stepInfo.textContent = 'Enter text and click a button to start!';
                this.elements.encryptBtn.disabled = false;
                this.elements.decryptBtn.disabled = false;
                
                this.elements.alphabetWheel.querySelectorAll('.letter-box').forEach(box => box.classList.remove('highlight', 'result'));
            }
        }
        
        initializeCaesarVisualizer(containerId);
    </script>
</VisualizerLayout>