---
// src/components/visualizers/RailFenceVisualizer.astro

import VisualizerLayout from './VisualizerLayout.astro';
---

<VisualizerLayout title="Rail Fence Cipher Visualizer" uniqueId="rail-fence-visualizer">
    <div slot="controls" class="control-group">
        <label for="plaintext">Enter Text:</label>
        <input type="text" id="plaintext" value="WEAREDISCOVEREDFLEEATONCE">
    </div>

    <div slot="controls" class="control-group">
        <label for="rails">Number of Rails:</label>
        <input type="number" id="rails" value="3" min="2">
    </div>

    <div slot="controls" class="control-group">
        <label for="speed">Speed:</label>
        <div class="speed-controls">
            <input type="range" id="speed" min="1" max="10" value="5">
            <span id="speed-display" class="speed-display">5</span>
        </div>
    </div>

    <div slot="validation">
        <!-- Validation area can be used for error messages if needed -->
    </div>

    <div slot="actions">
        <button id="encrypt-btn">ðŸ”’ Encrypt</button>
        <button id="decrypt-btn">ðŸ”“ Decrypt</button>
        <button id="reset-btn">â†» Reset</button>
    </div>

    <div slot="visualization-panel" class="rail-grid-container">
        <div id="rail-grid-vis" class="rail-grid-vis"></div>
    </div>

    <div slot="text-display">
        <!-- Text display will be handled by step-info -->
    </div>

    <script slot="script" src="https://cdnjs.cloudflare.com/ajax/libs/d3/7.8.5/d3.min.js"></script>
    <script slot="script">
        class RailFenceVisualizer {
            constructor() {
                this.isAnimating = false;
                this.animationSpeed = 1000;
                
                this.initializeElements();
                this.setupEventListeners();
                this.createVisualization();
            }

            initializeElements() {
                this.plaintextInput = document.getElementById('plaintext');
                this.railsInput = document.getElementById('rails');
                this.speedInput = document.getElementById('speed');
                this.speedDisplay = document.getElementById('speed-display');
                
                this.encryptBtn = document.getElementById('encrypt-btn');
                this.decryptBtn = document.getElementById('decrypt-btn');
                this.resetBtn = document.getElementById('reset-btn');

                this.stepInfo = document.querySelector('#rail-fence-visualizer .step-info');
                this.progressFill = document.querySelector('#rail-fence-visualizer .progress-fill');
                this.visContainer = document.getElementById('rail-grid-vis');
            }

            setupEventListeners() {
                this.plaintextInput.addEventListener('input', () => this.createVisualization());
                this.railsInput.addEventListener('input', () => this.createVisualization());
                this.speedInput.addEventListener('input', () => this.updateSpeedDisplay());

                this.encryptBtn.addEventListener('click', () => this.startAnimation('encrypt'));
                this.decryptBtn.addEventListener('click', () => this.startAnimation('decrypt'));
                this.resetBtn.addEventListener('click', () => this.reset());
            }

            updateSpeedDisplay() {
                this.speedDisplay.textContent = this.speedInput.value;
                this.animationSpeed = 1100 - (parseInt(this.speedInput.value) * 100);
            }
            
            // --- Cipher Logic ---
            
            getFence(text, numRails) {
                let fence = Array(numRails).fill().map(() => []);
                let rail = 0;
                let direction = 1;

                for (const char of text) {
                    fence[rail].push(char);
                    rail += direction;
                    if (rail === 0 || rail === numRails - 1) {
                        direction *= -1;
                    }
                }
                return fence;
            }

            encrypt(text, numRails) {
                const fence = this.getFence(text, numRails);
                return fence.flat().join('');
            }
            
            decrypt(text, numRails) {
                const fenceTemplate = this.getFence(text, numRails).map(rail => rail.length);
                let fence = Array(numRails).fill().map(() => []);
                let textIndex = 0;

                for (let i = 0; i < numRails; i++) {
                    for (let j = 0; j < fenceTemplate[i]; j++) {
                        fence[i].push(text[textIndex++]);
                    }
                }

                let result = '';
                let railCounters = Array(numRails).fill(0);
                let rail = 0;
                let direction = 1;
                
                for (let i = 0; i < text.length; i++) {
                    result += fence[rail][railCounters[rail]++];
                    rail += direction;
                    if (rail === 0 || rail === numRails - 1) {
                        direction *= -1;
                    }
                }
                return result;
            }

            // --- Visualization and Animation ---

            createVisualization() {
                d3.select(this.visContainer).selectAll("*").remove();
                const text = this.plaintextInput.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
                const numRails = parseInt(this.railsInput.value) || 0;

                if (!text || numRails < 2) {
                    this.stepInfo.textContent = "Enter text and at least 2 rails.";
                    return;
                }
                this.stepInfo.textContent = "Grid ready. Click a button to start.";

                const textLength = text.length;
                const cellSize = 40;
                const svgWidth = textLength * cellSize;
                const svgHeight = numRails * cellSize;
                
                const svg = d3.select(this.visContainer)
                    .append("svg")
                    .attr("width", svgWidth)
                    .attr("height", svgHeight);

                let rail = 0;
                let direction = 1;

                // Draw zigzag lines first so they are in the background
                for(let i=0; i < textLength - 1; i++) {
                    let nextRail = rail + direction;
                    svg.append("line")
                       .attr("id", `line-${i}`)
                       .attr("x1", i * cellSize + cellSize / 2)
                       .attr("y1", rail * cellSize + cellSize / 2)
                       .attr("x2", (i + 1) * cellSize + cellSize / 2)
                       .attr("y2", nextRail * cellSize + cellSize / 2);
                    
                    rail = nextRail;
                    if(rail === 0 || rail === numRails - 1) direction *= -1;
                }

                // Draw cells and text on top
                for (let r = 0; r < numRails; r++) {
                    for (let c = 0; c < textLength; c++) {
                        svg.append("rect").attr("id", `rect-${r}-${c}`).attr("x", c * cellSize).attr("y", r * cellSize).attr("width", cellSize).attr("height", cellSize);
                        svg.append("text").attr("id", `text-${r}-${c}`).attr("x", c * cellSize + cellSize / 2).attr("y", r * cellSize + cellSize / 2 + 7).attr("text-anchor", "middle");
                    }
                }
            }
            
            async startAnimation(mode) {
                if(this.isAnimating) return;

                const text = this.plaintextInput.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
                const numRails = parseInt(this.railsInput.value) || 0;

                if (!text || numRails < 2) {
                    this.stepInfo.textContent = "Please enter text and at least 2 rails.";
                    return;
                }

                this.isAnimating = true;
                this.setControlsState(false);
                this.updateProgress(0);
                this.createVisualization(); // Redraw fresh grid

                if (mode === 'encrypt') {
                    await this.animateEncryption(text, numRails);
                } else {
                    await this.animateDecryption(text, numRails);
                }

                this.isAnimating = false;
                this.setControlsState(true);
            }

            async animateEncryption(text, numRails) {
                this.stepInfo.textContent = "Placing letters on the fence...";
                let rail = 0, direction = 1;
                
                // Phase 1: Place letters in zigzag
                for(let i=0; i<text.length; i++) {
                    d3.select(`#text-${rail}-${i}`).text(text[i]).classed("visible", true);
                    d3.select(`#line-${i-1}`).classed("highlight", false);
                    d3.select(`#line-${i}`).classed("highlight", true);

                    await this.sleep(this.animationSpeed);
                    this.updateProgress((i + 1) / (text.length * 2) * 100);
                    rail += direction;
                    if(rail === 0 || rail === numRails - 1) direction *= -1;
                }
                d3.selectAll("line").classed("highlight", false);

                // Phase 2: Read letters row by row
                this.stepInfo.textContent = "Reading the ciphertext from the fence...";
                let resultText = '';
                for(let r=0; r<numRails; r++) {
                    for(let c=0; c<text.length; c++) {
                        const cellText = d3.select(`#text-${r}-${c}`).text();
                        if (cellText) {
                            d3.select(`#rect-${r}-${c}`).classed("highlight-read", true);
                            d3.select(`#text-${r}-${c}`).classed("highlight-read", true);
                            resultText += cellText;
                            this.stepInfo.textContent = resultText;
                            await this.sleep(this.animationSpeed);
                            this.updateProgress((text.length + resultText.length) / (text.length * 2) * 100);
                        }
                    }
                }
                this.stepInfo.innerHTML = `Encryption Complete! Result: <b style="color: #51cf66;">${resultText}</b>`;
            }

            async animateDecryption(text, numRails) {
                this.stepInfo.textContent = "Filling the fence with ciphertext...";
                const fenceTemplate = this.getFence(text, numRails).map(rail => rail.length);
                let textIndex = 0;

                // Phase 1: Place letters row by row
                for(let r=0; r<numRails; r++) {
                    for(let j=0; j<fenceTemplate[r]; j++) {
                        // Find the next empty spot in this rail for visualization
                        let c = 0;
                        while(d3.select(`#text-${r}-${c}`).text() !== '') c++;
                        
                        let currentRail = 0, direction = 1;
                        for(let k=0; k<text.length; k++) {
                            if(currentRail === r) {
                                if(d3.select(`#text-${currentRail}-${k}`).text() === '') {
                                    d3.select(`#text-${r}-${k}`).text(text[textIndex]).classed("visible", true).classed("highlight", true);
                                    this.stepInfo.textContent = text.substring(0, textIndex+1);
                                    textIndex++;
                                    await this.sleep(this.animationSpeed);
                                    d3.select(`#text-${r}-${k}`).classed("highlight", false);
                                    this.updateProgress((textIndex) / (text.length * 2) * 100);
                                    break;
                                }
                            }
                            currentRail += direction;
                            if(currentRail === 0 || currentRail === numRails - 1) direction *= -1;
                        }
                    }
                }

                // Phase 2: Read letters in zigzag
                this.stepInfo.textContent = "Reading the plaintext along the path...";
                let resultText = '';
                let rail = 0, direction = 1;
                for(let i=0; i<text.length; i++) {
                    const char = d3.select(`#text-${rail}-${i}`).text();
                    resultText += char;
                    d3.select(`#rect-${rail}-${i}`).classed("highlight-read", true);
                    d3.select(`#text-${rail}-${i}`).classed("highlight-read", true);
                    d3.select(`#line-${i-1}`).classed("highlight", false);
                    d3.select(`#line-${i}`).classed("highlight", true);

                    this.stepInfo.textContent = resultText;
                    await this.sleep(this.animationSpeed);
                    this.updateProgress((text.length + resultText.length) / (text.length * 2) * 100);

                    rail += direction;
                    if(rail === 0 || rail === numRails - 1) direction *= -1;
                }
                 d3.selectAll("line").classed("highlight", false);
                 this.stepInfo.innerHTML = `Decryption Complete! Result: <b style="color: #51cf66;">${resultText}</b>`;
            }

            updateProgress(percentage) {
                this.progressFill.style.width = percentage + '%';
            }

            setControlsState(enabled) {
                this.encryptBtn.disabled = !enabled;
                this.decryptBtn.disabled = !enabled;
                this.resetBtn.disabled = !enabled;
                this.plaintextInput.disabled = !enabled;
                this.railsInput.disabled = !enabled;
            }

            sleep(ms) {
                return new Promise(resolve => setTimeout(resolve, ms));
            }

            reset() {
                this.isAnimating = false;
                this.setControlsState(true);
                this.updateProgress(0);
                this.plaintextInput.value = "WEAREDISCOVEREDFLEEATONCE";
                this.railsInput.value = 3;
                this.stepInfo.textContent = "Enter text and number of rails to begin.";
                this.createVisualization();
            }
        }

        // Initialize when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new RailFenceVisualizer();
        });
    </script>
</VisualizerLayout>