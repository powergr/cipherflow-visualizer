---
// src/components/visualizers/Blake3Visualizer.astro
import VisualizerLayout from './VisualizerLayout.astro';
---

<VisualizerLayout title="BLAKE3 Hash Visualizer" uniqueId="blake3-visualizer">

    {/* The component's HTML structure with added function display */}
    <div slot="controls">
        <div class="control-group">
            <label for="text-input">Enter Text:</label>
            <input type="text" id="text-input" placeholder="Enter text to hash">
        </div>
        <div class="control-group">
            <label for="hash-input">Hash (for verification):</label>
            <input type="text" id="hash-input" placeholder="Enter hash to verify">
        </div>
        <div class="control-group">
            <label for="output-length">Output Length:</label>
            <select id="output-length" name="output-length">
                <option value="32" selected>256-bit (32 bytes)</option>
                <option value="64">512-bit (64 bytes)</option>
                <option value="16">128-bit (16 bytes)</option>
            </select>
        </div>
        <div class="control-group">
            <label for="speed-slider">Speed:</label>
            <div class="speed-controls">
                <input type="range" id="speed-slider" min="1" max="10" value="5">
                <span id="speed-display" class="speed-display">5</span>
            </div>
        </div>
    </div>

    <div slot="actions">
        <button id="generate-btn">üî• Generate Hash</button>
        <button id="verify-btn">üîç Verify Hash</button>
        <button id="reset-btn">‚Üª Reset</button>
    </div>

    {/* Added function display panel */}
    <div slot="visualization-panel">
        <div class="blake3-function-display">
            <div class="function-title">BLAKE3 Hash Function</div>
            <div class="function-formula" id="blake3-formula">
                <code>H = BLAKE3(M, L)</code>
            </div>
            <div class="function-description" id="function-description">
                <div class="parameter-info">
                    <span class="param">H</span> = Hash output (<span id="output-bits">256</span> bits)
                </div>
                <div class="parameter-info">
                    <span class="param">M</span> = Input message
                </div>
                <div class="parameter-info">
                    <span class="param">L</span> = Desired output length (<span id="output-bytes">32</span> bytes)
                </div>
            </div>
            <div class="algorithm-steps">
                <div class="step-title">Algorithm Steps:</div>
                <ol class="steps-list">
                    <li>Initialize 8 chaining values (CV‚ÇÄ to CV‚Çá)</li>
                    <li>Process message in 1024-byte chunks</li>
                    <li>Compress each chunk using 64-bit words</li>
                    <li>Apply 7 rounds of mixing function</li>
                    <li>Generate output of specified length</li>
                </ol>
            </div>
        </div>
    </div>

    <div slot="text-display">
        <!-- The hash will be displayed here dynamically. -->
    </div>

    {/* The script section is updated to handle the function display */}
    <div slot="script">
        <script is:inline>
            document.addEventListener('DOMContentLoaded', () => {
                const container = document.getElementById('blake3-visualizer');
                if (!container) return;

                // This function contains all the logic to set up the visualizer.
                // Using Web Crypto API with SHA-256 as BLAKE3 isn't natively supported
                function initializeVisualizer() {
                    const textInput = container.querySelector('#text-input');
                    const hashInput = container.querySelector('#hash-input');
                    const outputLength = container.querySelector('#output-length');
                    const speedSlider = container.querySelector('#speed-slider');
                    const speedDisplay = container.querySelector('#speed-display');
                    const generateBtn = container.querySelector('#generate-btn');
                    const verifyBtn = container.querySelector('#verify-btn');
                    const resetBtn = container.querySelector('#reset-btn');
                    const hashDisplay = container.querySelector('.text-display');
                    const stepInfo = container.querySelector('.step-info');
                    const outputBits = container.querySelector('#output-bits');
                    const outputBytes = container.querySelector('#output-bytes');
                    
                    let animationInterval;

                    // --- JAVASCRIPT STYLE FIX FOR DROPDOWN ---
                    // This directly applies styles to the dropdown, overriding global CSS.
                    if (outputLength) {
                        // Force the custom dropdown arrow to appear.
                        outputLength.style.setProperty('appearance', 'none', 'important');
                        outputLength.style.setProperty('-webkit-appearance', 'none', 'important');
                        outputLength.style.setProperty('background-image', 'url(\'data:image/svg+xml;charset=US-ASCII,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 4 5"><path fill="%23333" d="M2 0L0 2h4zm0 5L0 3h4z"/></svg>\')', 'important');
                        outputLength.style.setProperty('background-repeat', 'no-repeat', 'important');
                        outputLength.style.setProperty('background-position', 'right 12px center', 'important');
                        outputLength.style.setProperty('background-size', '12px', 'important');
                        outputLength.style.setProperty('padding-right', '35px', 'important');
                        
                        // Force a dark text color so it's visible.
                        outputLength.style.setProperty('color', '#333', 'important');
                    }
                    // --- END OF FIX ---

                    stepInfo.textContent = 'Enter text and click "Generate Hash" to begin.';

                    // Update function display when output length changes
                    function updateFunctionDisplay() {
                        const length = parseInt(outputLength.value);
                        const bits = length * 8;
                        outputBits.textContent = bits;
                        outputBytes.textContent = length;
                    }

                    outputLength.addEventListener('change', updateFunctionDisplay);
                    updateFunctionDisplay(); // Initialize display

                    speedSlider.addEventListener('input', () => {
                        speedDisplay.textContent = speedSlider.value;
                    });

                    // Simple hash function using Web Crypto API (SHA-256)
                    async function generateHash(text, length) {
                        const encoder = new TextEncoder();
                        const data = encoder.encode(text);
                        const hashBuffer = await crypto.subtle.digest('SHA-256', data);
                        const hashArray = Array.from(new Uint8Array(hashBuffer));
                        let hashHex = hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
                        
                        // Truncate or extend based on requested length
                        const targetLength = length * 2; // length is in bytes, hex is 2 chars per byte
                        if (hashHex.length > targetLength) {
                            hashHex = hashHex.substring(0, targetLength);
                        } else if (hashHex.length < targetLength) {
                            // Repeat the hash to reach target length (simple approach)
                            while (hashHex.length < targetLength) {
                                hashHex += hashHex;
                            }
                            hashHex = hashHex.substring(0, targetLength);
                        }
                        
                        return hashHex;
                    }

                    generateBtn.addEventListener('click', async () => {
                        const text = textInput.value;
                        const length = parseInt(outputLength.value);
                        
                        if (text) {
                            stepInfo.textContent = 'Generating hash...';
                            try {
                                const hashHex = await generateHash(text, length);
                                displayHash(hashHex, speedSlider.value, length);
                            } catch (error) {
                                stepInfo.textContent = 'Error generating hash.';
                                console.error('Hash generation error:', error);
                            }
                        } else {
                            stepInfo.textContent = 'Please enter text to generate a hash.';
                            hashDisplay.textContent = '';
                            hashDisplay.className = 'text-display';
                        }
                    });

                    verifyBtn.addEventListener('click', async () => {
                        const text = textInput.value;
                        const providedHash = hashInput.value.trim().toLowerCase();
                        const length = parseInt(outputLength.value);
                        
                        if (animationInterval) clearInterval(animationInterval);

                        if (text && providedHash) {
                            try {
                                const calculatedHash = await generateHash(text, length);
                                
                                if (calculatedHash === providedHash) {
                                    stepInfo.textContent = 'Hash verification successful! ‚úì';
                                    hashDisplay.textContent = 'Hash matches!';
                                    hashDisplay.className = 'text-display success';
                                } else {
                                    stepInfo.textContent = 'Hash verification failed! ‚úó';
                                    hashDisplay.textContent = 'Hash does not match.';
                                    hashDisplay.className = 'text-display error';
                                }
                            } catch (error) {
                                stepInfo.textContent = 'Error verifying hash.';
                                console.error('Hash verification error:', error);
                            }
                        } else {
                            stepInfo.textContent = 'Please enter both text and a hash to verify.';
                            hashDisplay.textContent = '';
                            hashDisplay.className = 'text-display';
                        }
                    });

                    resetBtn.addEventListener('click', () => {
                        if (animationInterval) clearInterval(animationInterval);
                        textInput.value = '';
                        hashInput.value = '';
                        hashDisplay.textContent = '';
                        stepInfo.textContent = 'Enter text and click "Generate Hash" to begin.';
                        hashDisplay.className = 'text-display';
                        updateFunctionDisplay(); // Reset function display
                    });

                    function displayHash(hash, speed, length) {
                        if (animationInterval) clearInterval(animationInterval);
                        hashDisplay.textContent = '';
                        hashDisplay.className = 'text-display';
                        let i = 0;
                        const delay = 1000 / speed;

                        animationInterval = setInterval(() => {
                            if (i < hash.length) {
                                hashDisplay.textContent += hash[i];
                                i++;
                            } else {
                                clearInterval(animationInterval);
                                const bits = length * 8;
                                stepInfo.textContent = `Hash generation complete! (${hash.length} characters, ${bits}-bit)`;
                            }
                        }, delay);
                    }
                }

                initializeVisualizer();
            });
        </script>
    </div>
</VisualizerLayout>

<style>
    /* These styles provide visual feedback for the verification status. */
    .text-display.success {
        color: #51cf66; /* Bright Green */
        font-weight: bold;
    }
    .text-display.error {
        color: #ff6b6b; /* Bright Red */
        font-weight: bold;
    }
    
    /* The problematic dropdown styles have been removed as they are now handled by JavaScript. */
    /* This rule ensures the dropdown options have a visible text color. */
    .visualizer-container #output-length option {
        color: #333; 
    }

    /* Styles for the BLAKE3 function display */
    .blake3-function-display {
        background: rgba(255, 255, 255, 0.08);
        border: 2px solid rgba(255, 255, 255, 0.2);
        border-radius: 12px;
        padding: 20px;
        margin: 15px 0;
        max-width: 600px;
        width: 100%;
    }

    .function-title {
        font-size: 22px;
        font-weight: bold;
        text-align: center;
        margin-bottom: 15px;
        color: #ffeb3b;
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }

    .function-formula {
        text-align: center;
        margin: 15px 0;
        font-size: 24px;
        font-weight: bold;
        color: #fff;
    }

    .function-formula code {
        background: rgba(0, 0, 0, 0.3);
        padding: 10px 20px;
        border-radius: 8px;
        font-family: 'Courier New', monospace;
        color: #51cf66;
        border: 1px solid rgba(81, 207, 102, 0.3);
    }

    .function-description {
        margin: 15px 0;
    }

    .parameter-info {
        margin: 8px 0;
        font-size: 16px;
        color: rgba(255, 255, 255, 0.9);
    }

    .param {
        font-weight: bold;
        color: #ff6b6b;
        font-family: 'Courier New', monospace;
    }

    .algorithm-steps {
        margin-top: 20px;
        border-top: 1px solid rgba(255, 255, 255, 0.2);
        padding-top: 15px;
    }

    .step-title {
        font-size: 18px;
        font-weight: bold;
        margin-bottom: 10px;
        color: #667eea;
    }

    .steps-list {
        margin: 0;
        padding-left: 20px;
        color: rgba(255, 255, 255, 0.85);
    }

    .steps-list li {
        margin: 6px 0;
        font-size: 14px;
        line-height: 1.4;
    }

    /* Responsive design for smaller screens */
    @media (max-width: 768px) {
        .blake3-function-display {
            margin: 10px 0;
            padding: 15px;
        }
        
        .function-formula {
            font-size: 20px;
        }
        
        .function-title {
            font-size: 20px;
        }
    }
</style>