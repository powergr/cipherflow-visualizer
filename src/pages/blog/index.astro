---
// index.astro (COMPLETE AND CORRECT FRONTMATTER)
import BaseLayout from '../../layouts/BaseLayout.astro';
import BlogCard from '../../components/BlogCard.astro';
import { getCollection, type CollectionEntry } from 'astro:content';
import { blogUtils } from '../../content/config';

// 1. GET ALL DATA (Same as before)
const allPosts = await getCollection('blog');
const publishedPosts = blogUtils.filterPublished(allPosts);
const sortedPosts = blogUtils.sortByDate(publishedPosts);

// 2. RE-ADD ALL VARIABLES FOR SERVER-SIDE RENDER (This fixes your errors)
const featuredPosts = blogUtils.getFeatured(sortedPosts);
const beginnerPosts = blogUtils.filterByDifficulty(publishedPosts, 'beginner');
const intermediatePosts = blogUtils.filterByDifficulty(publishedPosts, 'intermediate');
const advancedPosts = blogUtils.filterByDifficulty(publishedPosts, 'advanced');
const allCategories = blogUtils.getAllCategories(publishedPosts);

// Re-add pagination variables for the initial page load text ("Showing 1-9 of...")
const postsPerPage = 9;
const currentPage = 1;
const totalPosts = sortedPosts.length;
const totalPages = Math.ceil(totalPosts / postsPerPage);
const startIndex = (currentPage - 1) * postsPerPage;
const endIndex = startIndex + postsPerPage;
const currentPosts = sortedPosts.slice(startIndex, endIndex); // For initial grid

// 3. PREPARE CLEAN DATA FOR THE CLIENT-SIDE SCRIPT (This fixes the 404s)
const postsForClient = sortedPosts.map((post: CollectionEntry<'blog'>) => ({
  slug: post.slug,
  title: post.data.title,
  description: post.data.description,
  pubDate: post.data.pubDate,
  category: post.data.category,
  difficulty: post.data.difficulty,
  // --- THIS IS THE FIX ---
  // Use the new 'thumbnail' field name
  thumbnail: post.data.thumbnail ? post.data.thumbnail.src : undefined,
  thumbnailAlt: post.data.thumbnailAlt,
  tags: post.data.tags,
}));

// Other page variables
const pageTitle = "Blog - Encryption Algorithms and Tools";
const pageDescription = "Explore our collection of encryption articles, tutorials, and guides.";
const base = import.meta.env.BASE_URL;
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <!-- Hero Section -->
  <section class="bg-gradient-to-br from-blue-50 to-indigo-100 dark:from-gray-900 dark:to-gray-800 py-16">
    <div class="container mx-auto px-6">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-6">
          Encryption
          <span class="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
            Algorithms and Tools
          </span>
        </h1>
        <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
          Discover Encryption Algorithms, How to break them, and Guides.
        </p>
        
        <!-- Blog Stats -->
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 max-w-2xl mx-auto">
          <div class="text-center">
            <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">{totalPosts}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Total Articles</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-green-600 dark:text-green-400">{beginnerPosts.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Beginner</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-yellow-600 dark:text-yellow-400">{intermediatePosts.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Intermediate</div>
          </div>
          <div class="text-center">
            <div class="text-2xl font-bold text-red-600 dark:text-red-400">{advancedPosts.length}</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Advanced</div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Featured Posts Section (Now works) -->
  {featuredPosts.length > 0 && (
    <section class="py-16 bg-white dark:bg-gray-900">
      <div class="container mx-auto px-6">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">Featured Articles</h2>
          <p class="text-lg text-gray-600 dark:text-gray-300">Our most popular and recommended content</p>
        </div>
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-12">
          {featuredPosts.slice(0, 3).map((post) => (
            <BlogCard post={post} />
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Filters Section (Now works) -->
  <section class="py-8 bg-gray-50 dark:bg-gray-800">
    <div class="container mx-auto px-6">
      <div class="flex flex-wrap gap-4 items-center justify-center">
        <div class="flex items-center space-x-2">
          <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Categories:</span>
          <div class="flex flex-wrap gap-2">
            <button class="px-3 py-1 bg-blue-600 text-white text-sm rounded-full hover:bg-blue-700 transition-colors filter-btn" data-filter="all" data-type="category">All</button>
            {allCategories.slice(0, 5).map((category) => (
              <button class="px-3 py-1 bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 text-sm rounded-full hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors filter-btn" data-filter={category} data-type="category">
                {category}
              </button>
            ))}
          </div>
        </div>
        <div class="flex items-center space-x-2">
          <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Difficulty:</span>
          <div class="flex gap-2">
            <button class="px-3 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200 text-sm rounded-full hover:bg-green-200 dark:hover:bg-green-800 transition-colors filter-btn" data-filter="beginner" data-type="difficulty">Beginner</button>
            <button class="px-3 py-1 bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200 text-sm rounded-full hover:bg-yellow-200 dark:hover:bg-yellow-800 transition-colors filter-btn" data-filter="intermediate" data-type="difficulty">Intermediate</button>
            <button class="px-3 py-1 bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 text-sm rounded-full hover:bg-red-200 dark:hover:bg-red-800 transition-colors filter-btn" data-filter="advanced" data-type="difficulty">Advanced</button>
          </div>
        </div>
        <button id="clear-filters" class="px-4 py-2 bg-gray-600 text-white text-sm rounded-lg hover:bg-gray-700 transition-colors">Clear Filters</button>
      </div>
    </div>
  </section>

  <!-- Search Section -->
  <section class="py-8 bg-white dark:bg-gray-900">
      <div class="container mx-auto px-6">
        <div class="max-w-md mx-auto">
          <div class="relative">
            <input type="text" placeholder="Search articles..." class="w-full px-4 py-3 pl-12 pr-4 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-white focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent" id="search-input" />
            <svg class="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path></svg>
          </div>
        </div>
      </div>
    </section>

  <!-- All Posts Section -->
  <section class="py-16 bg-gray-50 dark:bg-gray-800">
    <div class="container mx-auto px-6">
      <div class="text-center mb-12">
        <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">All Articles</h2>
        <!-- This now works on initial load -->
        <p class="text-lg text-gray-600 dark:text-gray-300" id="posts-count">
          Showing {startIndex + 1}-{Math.min(endIndex, totalPosts)} of {totalPosts} articles
        </p>
      </div>
      
      <!-- This now renders the first page of posts correctly -->
      <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8 min-h-[400px]" id="posts-grid">
        {currentPosts.map((post) => (
          <BlogCard post={post} />
        ))}
      </div>

      <!-- No Results Message -->
      <div id="no-results" class="text-center py-12 hidden">
        <div class="text-gray-400 dark:text-gray-500 mb-4"><svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg></div>
        <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2">No articles found</h3>
        <p class="text-gray-600 dark:text-gray-300 mb-4">Try adjusting your search terms or filters</p>
        <button onclick="clearAllFilters()" class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">Clear All Filters</button>
      </div>

      <!-- Pagination Container (client script populates this) -->
      <div class="flex justify-center mt-12" id="pagination">
        <nav class="flex items-center space-x-2"></nav>
      </div>
    </div>
  </section>

  <!-- Newsletter Signup -->
  <section class="py-16 bg-gradient-to-r from-gray-900 to-black-900 text-white">
      <div class="container mx-auto px-6 text-center">
        <h2 class="text-3xl font-bold mb-4">Stay Updated</h2>
        <p class="text-xl mb-8 opacity-90">Get the latest articles and tutorials delivered to your inbox</p>
        <div class="max-w-md mx-auto">
          <form class="flex gap-2">
            <input type="email" placeholder="Enter your email" class="flex-1 px-4 py-3 rounded-lg text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-300" required />
            <button type="submit" class="px-6 py-3 bg-white text-blue-600 rounded-lg font-semibold hover:bg-gray-100 transition-colors">Subscribe</button>
          </form>
        </div>
      </div>
    </section>

  <!-- CORRECTED AND SIMPLIFIED CLIENT SCRIPT -->
 <script define:vars={{ base, postsData: postsForClient }}>
    // We are passing the clean, JSON-safe 'postsForClient' array.
    const allPosts = postsData;
    const postsPerPage = 9;
    let currentPage = 1;

    let currentFilters = {
      search: '',
      category: 'all',
      difficulty: 'all'
    };

    const searchInput = document.getElementById('search-input');
    const postsGrid = document.getElementById('posts-grid');
    const postsCount = document.getElementById('posts-count');
    const noResults = document.getElementById('no-results');
    const paginationContainer = document.getElementById('pagination');
    const filterButtons = document.querySelectorAll('.filter-btn');

    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    function handleSearch(e) {
      currentFilters.search = e.target.value.toLowerCase();
      currentPage = 1;
      renderUI();
    }

    function handleFilter(e) {
      const { type, filter } = e.target.dataset;
      currentFilters[type] = filter;
      currentPage = 1;
      renderUI();
    }

    function renderUI() {
      const filteredPosts = allPosts.filter(post => {
        const matchesSearch = !currentFilters.search || 
          post.title.toLowerCase().includes(currentFilters.search) ||
          post.description.toLowerCase().includes(currentFilters.search) ||
          (post.tags && post.tags.some(tag => tag.toLowerCase().includes(currentFilters.search)));
        
        const matchesCategory = currentFilters.category === 'all' || post.category === currentFilters.category;
        const matchesDifficulty = currentFilters.difficulty === 'all' || post.difficulty === currentFilters.difficulty;
        
        return matchesSearch && matchesCategory && matchesDifficulty;
      });

      const totalFilteredPosts = filteredPosts.length;
      const totalPages = Math.ceil(totalFilteredPosts / postsPerPage) || 1;

      if (currentPage > totalPages) {
        currentPage = totalPages;
      }

      const startIndex = (currentPage - 1) * postsPerPage;
      const endIndex = startIndex + postsPerPage;
      const paginatedPosts = filteredPosts.slice(startIndex, endIndex);

      displayPosts(paginatedPosts);
      updatePostsCount(totalFilteredPosts, startIndex, endIndex);
      updatePaginationUI(totalPages);
      updateFilterButtonsUI();

      const hasResults = totalFilteredPosts > 0;
      postsGrid.classList.toggle('hidden', !hasResults);
      noResults.classList.toggle('hidden', hasResults);
    }
    
    function displayPosts(posts) {
      const difficultyColors = {
        beginner: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200',
        intermediate: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200',
        advanced: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'
      };

      postsGrid.innerHTML = posts.map(post => {
        // --- THIS IS THE FIX ---
        // Destructure 'thumbnail' and 'thumbnailAlt' instead of 'image'
        const { slug, title, description, pubDate, thumbnail, thumbnailAlt, category, difficulty } = post;
        
        // Use the new variables to build the HTML
       const imageHTML = thumbnail ? `<div class="overflow-hidden bg-gray-200 dark:bg-gray-700"><a href="${base}/blog/${slug}"><img src="${thumbnail}" alt="${thumbnailAlt || title}" class="w-full h-48 object-contain object-center group-hover:scale-105 transition-transform duration-300" loading="lazy"/></a></div>` : '';
        const categoryBadge = category ? `<a href="${base}/categories/${category.toLowerCase().replace(/\s+/g, '-')}" ...>${category}</a>` : '';
        const difficultyBadge = difficulty ? `<span class="...">${difficulty.charAt(0).toUpperCase() + difficulty.slice(1)}</span>` : '';
        const formattedDate = new Date(pubDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' });

        return `
        <article class="group flex flex-col bg-white dark:bg-gray-800 rounded-lg shadow-md hover:shadow-xl transition-shadow duration-300 overflow-hidden">
          ${imageHTML}
          <div class="p-6 flex flex-col flex-grow">
            <div class="flex items-center gap-3 mb-3">${categoryBadge}${difficultyBadge}</div>
            <h2 class="text-xl font-bold text-gray-900 dark:text-white mb-2 flex-grow">
              <!-- FIX #3: Added slash after ${base} -->
              <a href="${base}/blog/${slug}" class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors">${title}</a>
            </h2>
            <p class="text-gray-600 dark:text-gray-400 mb-4 text-sm">${description}</p>
            <div class="mt-auto pt-4 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-500 dark:text-gray-400">
              <time datetime="${new Date(pubDate).toISOString()}">${formattedDate}</time>
            </div>
          </div>
        </article>`;
      }).join('');
    }
    
    function updatePostsCount(total, start, end) {
      const startNum = total === 0 ? 0 : start + 1;
      const endNum = Math.min(end, total);
      postsCount.textContent = `Showing ${startNum}-${endNum} of ${total} articles`;
    }

    function changePage(page) {
      currentPage = page;
      renderUI();
    }
    window.changePage = changePage;

    function updatePaginationUI(totalPages) {
      const nav = paginationContainer.querySelector('nav');
      if (!nav) return;
      
      paginationContainer.style.display = totalPages <= 1 ? 'none' : 'flex';
      if (totalPages <= 1) {
        nav.innerHTML = '';
        return;
      }

      let paginationHTML = `<button class="px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" ${currentPage === 1 ? 'disabled' : ''} onclick="changePage(${currentPage - 1})"><svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path></svg></button>`;
      for (let i = 1; i <= totalPages; i++) {
        paginationHTML += `<button class="px-4 py-2 rounded-lg font-medium transition-colors ${i === currentPage ? 'bg-blue-600 text-white' : 'border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700'}" onclick="changePage(${i})">${i}</button>`;
      }
      paginationHTML += `<button class="px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed" ${currentPage === totalPages ? 'disabled' : ''} onclick="changePage(${currentPage + 1})"><svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path></svg></button>`;
      nav.innerHTML = paginationHTML;
    }
    
    function updateFilterButtonsUI() {
      document.querySelectorAll('.filter-btn[data-type="category"]').forEach(btn => {
        const isActive = currentFilters.category === btn.dataset.filter;
        btn.classList.toggle('bg-blue-600', isActive);
        btn.classList.toggle('text-white', isActive);
        btn.classList.toggle('bg-gray-200', !isActive);
        btn.classList.toggle('dark:bg-gray-700', !isActive);
      });
    }

    function clearAllFilters() {
      currentFilters = { search: '', category: 'all', difficulty: 'all' };
      searchInput.value = '';
      currentPage = 1;
      renderUI();
    }
    window.clearAllFilters = clearAllFilters;

    searchInput.addEventListener('input', debounce(handleSearch, 300));
    filterButtons.forEach(btn => btn.addEventListener('click', handleFilter));
    document.getElementById('clear-filters').addEventListener('click', clearAllFilters);
    document.querySelector('form').addEventListener('submit', (e) => {
      e.preventDefault();
      alert('Thank you for subscribing! (This is a demo)');
      e.target.reset();
    });

    document.addEventListener('DOMContentLoaded', renderUI);
  </script>
</BaseLayout>